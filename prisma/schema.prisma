// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RecurringBills {
  id        String                @id @default(cuid())
  name      String
  category  TRANSACTION_CATEGORY?
  dueDay    Int
  interval  RECURRING_INTERVAL    @default(MONTHLY)
  isActive  Boolean               @default(true)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  instances BillInstances[]
}

// Cada fatura gerada mensalmente a partir de uma conta recorrente

model BillInstances {
  id              String         @id @default(cuid())
  recurringBillId String
  recurringBill   RecurringBills @relation(fields: [recurringBillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  referenceMonth  DateTime // ex: "2025-08-01" (usar sempre dia 1 do mÃªs)
  amount          Int?
  dueDate         DateTime
  isPaid          Boolean        @default(false)
  paidAt          DateTime?

  transaction Transactions? // quando pago, gera uma Transaction vinculada
  createdAt   DateTime      @default(now())
}

model Wallets {
  id          String         @id @default(cuid())
  name        String
  balance     Int            @default(0)
  walletType  WALLET_TYPE    @default(CASH)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Transaction Transactions[]
}

model Transactions {
  id             String                @id @default(cuid())
  walletId       String
  wallet         Wallets               @relation(fields: [walletId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billInstanceId String?               @unique
  billInstance   BillInstances?        @relation(fields: [billInstanceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  amount         Int
  type           TransactionType       @default(INCOME)
  category       TRANSACTION_CATEGORY?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  description    String?
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RECURRING_INTERVAL {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TRANSACTION_CATEGORY {
  SALARY
  FREELANCE
  INVESTMENTS
  GIFTS
  RENTAL_INCOME
  BONUS
  REIMBURSEMENT
  OTHER_INCOME

  HOUSING
  UTILITIES
  GROCERIES
  BAKERY
  MARKET
  PHARMACY
  HEALTHCARE
  TRANSPORTATION
  FUEL
  EDUCATION
  ENTERTAINMENT
  RESTAURANT
  CLOTHING
  INSURANCE
  SUBSCRIPTIONS
  TRAVEL
  TAXES
  DEBT_PAYMENT
  OTHER_EXPENSE
}

enum WALLET_TYPE {
  CASH
  BANK
  CREDIT_CARD
  DIGITAL_WALLET
  VOUCHER
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  members     Member[]
  invitations Invitation[]

  isOnboardingCompleted Boolean?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
